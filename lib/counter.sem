#include <fcntl.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>

#define SEM_ENTER      -1      /* enter semaphore */
#define SEM_LEAVE      1       /* leave semaphore */
#define SEM_RESET      0       /* reset semaphore */
#define C_SEMKEY	2222

/* ­p¼Æ¾¹ wildcat */

int counter_semid;

/* ----------------------------------------------------- */
/* semaphore : for critical section                      */
/* ----------------------------------------------------- */

#define SEM_FLG        0600    /* semaphore mode */


void              /*  sem_init(BSEM_KEY,&ap_semid)  */
sem_init(int semkey,int *semid)
{
#if defined(SunOS) || defined(SOLARIS) || defined(LINUX)
  int semval = 1;
#else  
  union semun semval;  // ¸Ñ¨M¬Y¨Ç OS ·|§â 1 »{¬°¬O int ¤§°ÝÃD
  semval.val = 1;
#endif  

  *semid = semget(semkey, 1, 0);
  if (*semid == -1)
  {
    *semid = semget(semkey, 1, IPC_CREAT | SEM_FLG);
//    if (*semid == -1)
//      attach_err(semkey, "semget");
    semctl(*semid, 0, SETVAL, semval);
  }
}

void
sem_lock(int op,int semid)   /*  sem_lock(SEM_LEAVE,ap_semid)  */
{
  struct sembuf sops;

  sops.sem_num = 0;
  sops.sem_flg = SEM_UNDO;
  sops.sem_op = op;
  semop(semid, &sops, 1);
}


void
counter(filename,modes,n)
  char *filename;
  char *modes;
  int n;
{
  FILE *fp;
  unsigned long visited=0;
//  char buf[1024];

  sem_init(C_SEMKEY,&counter_semid);
  sem_lock(SEM_ENTER,counter_semid);
  if(fp = fopen(filename,"r"))
  {
    fscanf(fp,"%lu",&visited);
    fclose(fp);
  }

  prints(" [1;44m [33m¢i  ±z¬O%s²Ä[36m %-10ld [33m¦ì %s ªº¨Ï¥ÎªÌ                             [m",
  n ? "¤µ¤Ñ" : "¦³¥v¥H¨Ó",++visited,modes);
  unlink(filename);

  if(fp = fopen(filename,"w"))
  {
    fprintf(fp,"%ld",visited);
    fclose(fp);
  }
  sem_lock(SEM_LEAVE,counter_semid);
}
